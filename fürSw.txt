-riskestimation nutzen (muss noch in controller)

wichtig:
-> creditservice -> saves weg + cascadierung -> safe bei credit handler customer // credit raus
//-> riskestimation nutzen (muss noch in controller)
//-> Allen CDI-Beansder Anwendung MUSS ein fachlich und technisch sinnvoller Scopezugeteilt werden
//-> scopes
//-> Transactionstypen (Required, Requires_NEW etc)
-> was ist kaskadierung? -> sollte einmal verwendet werden
//-> evtl paging repos
//-> alles an dennis schicken etc
-> wie fehlgeschlagene rest requests behandeln?
//-> dennis id hinzufügen
//-> @Configuration bei factory
-> konto erstellen zuverlässig abbrechen und nachricht
-> override hash und equals in entitys
//-> in addresse number auf long ändern
-> number in html in numerical
-> mehr geld am anfang
-> überall post / get thymeleaf methoden hinzufügen
//-> security checken ob alles stimmt
-> standard "header" (navigationsleiste) machen und "wiederverwenden"
-> "" nicht als gültigen user zulassen
-> security reworken -> Right und Customer Right rauslöschen
-> Exceptions aufpassen

to.do
//-> checken ob zb liste empty (bankaccounts oder so) -> bei allem immer
-> nochmal auf die ganzen optional achten -> zum beispiel in accountService bei get account || customer service get cutomer
-> evtl Optional nochmal umschreiben



Merken:
man kann umstellen auf ohne dennis
muss nichts löschen, da ich alle daten behalten möchte (rechtlich gesehen)


Änderungen:
Adresse kunde -> 1 zu 1
Adresse ohne id (embaddable)
user bekommt username
kein timestamp
account rückzahlungsrate
evtl kredit entity
added repayment rate
auch in dtos tid -> ID
key bei customer



